// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-service/repository/ent/member"
	"team-service/repository/ent/team"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
}

// SetTeamID sets the "team_id" field.
func (mc *MemberCreate) SetTeamID(s string) *MemberCreate {
	mc.mutation.SetTeamID(s)
	return mc
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (mc *MemberCreate) SetNillableTeamID(s *string) *MemberCreate {
	if s != nil {
		mc.SetTeamID(*s)
	}
	return mc
}

// SetAssignedBy sets the "assigned_by" field.
func (mc *MemberCreate) SetAssignedBy(s string) *MemberCreate {
	mc.mutation.SetAssignedBy(s)
	return mc
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (mc *MemberCreate) SetNillableAssignedBy(s *string) *MemberCreate {
	if s != nil {
		mc.SetAssignedBy(*s)
	}
	return mc
}

// SetApprovedBy sets the "approved_by" field.
func (mc *MemberCreate) SetApprovedBy(s string) *MemberCreate {
	mc.mutation.SetApprovedBy(s)
	return mc
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (mc *MemberCreate) SetNillableApprovedBy(s *string) *MemberCreate {
	if s != nil {
		mc.SetApprovedBy(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MemberCreate) SetStatus(m member.Status) *MemberCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetID sets the "id" field.
func (mc *MemberCreate) SetID(s string) *MemberCreate {
	mc.mutation.SetID(s)
	return mc
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (mc *MemberCreate) AddTeamIDs(ids ...string) *MemberCreate {
	mc.mutation.AddTeamIDs(ids...)
	return mc
}

// AddTeam adds the "team" edges to the Team entity.
func (mc *MemberCreate) AddTeam(t ...*Team) *MemberCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTeamIDs(ids...)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (mc *MemberCreate) SetTeamsID(id string) *MemberCreate {
	mc.mutation.SetTeamsID(id)
	return mc
}

// SetNillableTeamsID sets the "teams" edge to the Team entity by ID if the given value is not nil.
func (mc *MemberCreate) SetNillableTeamsID(id *string) *MemberCreate {
	if id != nil {
		mc = mc.SetTeamsID(*id)
	}
	return mc
}

// SetTeams sets the "teams" edge to the Team entity.
func (mc *MemberCreate) SetTeams(t *Team) *MemberCreate {
	return mc.SetTeamsID(t.ID)
}

// SetAssignedID sets the "assigned" edge to the Member entity by ID.
func (mc *MemberCreate) SetAssignedID(id string) *MemberCreate {
	mc.mutation.SetAssignedID(id)
	return mc
}

// SetNillableAssignedID sets the "assigned" edge to the Member entity by ID if the given value is not nil.
func (mc *MemberCreate) SetNillableAssignedID(id *string) *MemberCreate {
	if id != nil {
		mc = mc.SetAssignedID(*id)
	}
	return mc
}

// SetAssigned sets the "assigned" edge to the Member entity.
func (mc *MemberCreate) SetAssigned(m *Member) *MemberCreate {
	return mc.SetAssignedID(m.ID)
}

// AddMemberIDs adds the "member" edge to the Member entity by IDs.
func (mc *MemberCreate) AddMemberIDs(ids ...string) *MemberCreate {
	mc.mutation.AddMemberIDs(ids...)
	return mc
}

// AddMember adds the "member" edges to the Member entity.
func (mc *MemberCreate) AddMember(m ...*Member) *MemberCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMemberIDs(ids...)
}

// SetApprovedID sets the "approved" edge to the Member entity by ID.
func (mc *MemberCreate) SetApprovedID(id string) *MemberCreate {
	mc.mutation.SetApprovedID(id)
	return mc
}

// SetNillableApprovedID sets the "approved" edge to the Member entity by ID if the given value is not nil.
func (mc *MemberCreate) SetNillableApprovedID(id *string) *MemberCreate {
	if id != nil {
		mc = mc.SetApprovedID(*id)
	}
	return mc
}

// SetApproved sets the "approved" edge to the Member entity.
func (mc *MemberCreate) SetApproved(m *Member) *MemberCreate {
	return mc.SetApprovedID(m.ID)
}

// AddApproveIDs adds the "approve" edge to the Member entity by IDs.
func (mc *MemberCreate) AddApproveIDs(ids ...string) *MemberCreate {
	mc.mutation.AddApproveIDs(ids...)
	return mc
}

// AddApprove adds the "approve" edges to the Member entity.
func (mc *MemberCreate) AddApprove(m ...*Member) *MemberCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddApproveIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MemberCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MemberCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MemberCreate) check() error {
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Member.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := member.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Member.status": %w`, err)}
		}
	}
	return nil
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Member.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		_node = &Member{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(member.Table, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := mc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   member.TeamsTable,
			Columns: []string{member.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.AssignedTable,
			Columns: []string{member.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssignedBy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ApprovedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.ApprovedTable,
			Columns: []string{member.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApprovedBy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ApproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberCreateBulk is the builder for creating many Member entities in bulk.
type MemberCreateBulk struct {
	config
	err      error
	builders []*MemberCreate
}

// Save creates the Member entities in the database.
func (mcb *MemberCreateBulk) Save(ctx context.Context) ([]*Member, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Member, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MemberCreateBulk) SaveX(ctx context.Context) []*Member {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MemberCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MemberCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
