// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"team-service/repository/ent/team"
	"team-service/repository/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"userId"`
	// TeamID holds the value of the "team_id" field.
	TeamID *string `json:"teamId"`
	// AssignedBy holds the value of the "assigned_by" field.
	AssignedBy *string `json:"assignedBy"`
	// ApprovedBy holds the value of the "approved_by" field.
	ApprovedBy *string `json:"approvedBy"`
	// Status holds the value of the "status" field.
	Status user.Status `json:"status"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Team holds the value of the team edge.
	Team []*Team `json:"team,omitempty"`
	// Teams holds the value of the teams edge.
	Teams *Team `json:"teams,omitempty"`
	// Assigned holds the value of the assigned edge.
	Assigned *User `json:"assigned,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Approved holds the value of the approved edge.
	Approved *User `json:"approved,omitempty"`
	// Approve holds the value of the approve edge.
	Approve []*User `json:"approve,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TeamOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TeamsOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.Teams == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// AssignedOrErr returns the Assigned value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AssignedOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Assigned == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Assigned, nil
	}
	return nil, &NotLoadedError{edge: "assigned"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ApprovedOrErr returns the Approved value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ApprovedOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.Approved == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Approved, nil
	}
	return nil, &NotLoadedError{edge: "approved"}
}

// ApproveOrErr returns the Approve value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ApproveOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.Approve, nil
	}
	return nil, &NotLoadedError{edge: "approve"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldTeamID, user.FieldAssignedBy, user.FieldApprovedBy, user.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				u.TeamID = new(string)
				*u.TeamID = value.String
			}
		case user.FieldAssignedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_by", values[i])
			} else if value.Valid {
				u.AssignedBy = new(string)
				*u.AssignedBy = value.String
			}
		case user.FieldApprovedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by", values[i])
			} else if value.Valid {
				u.ApprovedBy = new(string)
				*u.ApprovedBy = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = user.Status(value.String)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the User entity.
func (u *User) QueryTeam() *TeamQuery {
	return NewUserClient(u.config).QueryTeam(u)
}

// QueryTeams queries the "teams" edge of the User entity.
func (u *User) QueryTeams() *TeamQuery {
	return NewUserClient(u.config).QueryTeams(u)
}

// QueryAssigned queries the "assigned" edge of the User entity.
func (u *User) QueryAssigned() *UserQuery {
	return NewUserClient(u.config).QueryAssigned(u)
}

// QueryUser queries the "user" edge of the User entity.
func (u *User) QueryUser() *UserQuery {
	return NewUserClient(u.config).QueryUser(u)
}

// QueryApproved queries the "approved" edge of the User entity.
func (u *User) QueryApproved() *UserQuery {
	return NewUserClient(u.config).QueryApproved(u)
}

// QueryApprove queries the "approve" edge of the User entity.
func (u *User) QueryApprove() *UserQuery {
	return NewUserClient(u.config).QueryApprove(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	if v := u.TeamID; v != nil {
		builder.WriteString("team_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.AssignedBy; v != nil {
		builder.WriteString("assigned_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.ApprovedBy; v != nil {
		builder.WriteString("approved_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
