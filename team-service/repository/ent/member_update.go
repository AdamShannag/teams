// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-service/repository/ent/member"
	"team-service/repository/ent/predicate"
	"team-service/repository/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTeamID sets the "team_id" field.
func (mu *MemberUpdate) SetTeamID(s string) *MemberUpdate {
	mu.mutation.SetTeamID(s)
	return mu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableTeamID(s *string) *MemberUpdate {
	if s != nil {
		mu.SetTeamID(*s)
	}
	return mu
}

// ClearTeamID clears the value of the "team_id" field.
func (mu *MemberUpdate) ClearTeamID() *MemberUpdate {
	mu.mutation.ClearTeamID()
	return mu
}

// SetAssignedBy sets the "assigned_by" field.
func (mu *MemberUpdate) SetAssignedBy(s string) *MemberUpdate {
	mu.mutation.SetAssignedBy(s)
	return mu
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableAssignedBy(s *string) *MemberUpdate {
	if s != nil {
		mu.SetAssignedBy(*s)
	}
	return mu
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (mu *MemberUpdate) ClearAssignedBy() *MemberUpdate {
	mu.mutation.ClearAssignedBy()
	return mu
}

// SetApprovedBy sets the "approved_by" field.
func (mu *MemberUpdate) SetApprovedBy(s string) *MemberUpdate {
	mu.mutation.SetApprovedBy(s)
	return mu
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableApprovedBy(s *string) *MemberUpdate {
	if s != nil {
		mu.SetApprovedBy(*s)
	}
	return mu
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (mu *MemberUpdate) ClearApprovedBy() *MemberUpdate {
	mu.mutation.ClearApprovedBy()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MemberUpdate) SetStatus(m member.Status) *MemberUpdate {
	mu.mutation.SetStatus(m)
	return mu
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (mu *MemberUpdate) AddTeamIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddTeamIDs(ids...)
	return mu
}

// AddTeam adds the "team" edges to the Team entity.
func (mu *MemberUpdate) AddTeam(t ...*Team) *MemberUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTeamIDs(ids...)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (mu *MemberUpdate) SetTeamsID(id string) *MemberUpdate {
	mu.mutation.SetTeamsID(id)
	return mu
}

// SetNillableTeamsID sets the "teams" edge to the Team entity by ID if the given value is not nil.
func (mu *MemberUpdate) SetNillableTeamsID(id *string) *MemberUpdate {
	if id != nil {
		mu = mu.SetTeamsID(*id)
	}
	return mu
}

// SetTeams sets the "teams" edge to the Team entity.
func (mu *MemberUpdate) SetTeams(t *Team) *MemberUpdate {
	return mu.SetTeamsID(t.ID)
}

// SetAssignedID sets the "assigned" edge to the Member entity by ID.
func (mu *MemberUpdate) SetAssignedID(id string) *MemberUpdate {
	mu.mutation.SetAssignedID(id)
	return mu
}

// SetNillableAssignedID sets the "assigned" edge to the Member entity by ID if the given value is not nil.
func (mu *MemberUpdate) SetNillableAssignedID(id *string) *MemberUpdate {
	if id != nil {
		mu = mu.SetAssignedID(*id)
	}
	return mu
}

// SetAssigned sets the "assigned" edge to the Member entity.
func (mu *MemberUpdate) SetAssigned(m *Member) *MemberUpdate {
	return mu.SetAssignedID(m.ID)
}

// AddMemberIDs adds the "member" edge to the Member entity by IDs.
func (mu *MemberUpdate) AddMemberIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddMemberIDs(ids...)
	return mu
}

// AddMember adds the "member" edges to the Member entity.
func (mu *MemberUpdate) AddMember(m ...*Member) *MemberUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemberIDs(ids...)
}

// SetApprovedID sets the "approved" edge to the Member entity by ID.
func (mu *MemberUpdate) SetApprovedID(id string) *MemberUpdate {
	mu.mutation.SetApprovedID(id)
	return mu
}

// SetNillableApprovedID sets the "approved" edge to the Member entity by ID if the given value is not nil.
func (mu *MemberUpdate) SetNillableApprovedID(id *string) *MemberUpdate {
	if id != nil {
		mu = mu.SetApprovedID(*id)
	}
	return mu
}

// SetApproved sets the "approved" edge to the Member entity.
func (mu *MemberUpdate) SetApproved(m *Member) *MemberUpdate {
	return mu.SetApprovedID(m.ID)
}

// AddApproveIDs adds the "approve" edge to the Member entity by IDs.
func (mu *MemberUpdate) AddApproveIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddApproveIDs(ids...)
	return mu
}

// AddApprove adds the "approve" edges to the Member entity.
func (mu *MemberUpdate) AddApprove(m ...*Member) *MemberUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddApproveIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearTeam clears all "team" edges to the Team entity.
func (mu *MemberUpdate) ClearTeam() *MemberUpdate {
	mu.mutation.ClearTeam()
	return mu
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (mu *MemberUpdate) RemoveTeamIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveTeamIDs(ids...)
	return mu
}

// RemoveTeam removes "team" edges to Team entities.
func (mu *MemberUpdate) RemoveTeam(t ...*Team) *MemberUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTeamIDs(ids...)
}

// ClearTeams clears the "teams" edge to the Team entity.
func (mu *MemberUpdate) ClearTeams() *MemberUpdate {
	mu.mutation.ClearTeams()
	return mu
}

// ClearAssigned clears the "assigned" edge to the Member entity.
func (mu *MemberUpdate) ClearAssigned() *MemberUpdate {
	mu.mutation.ClearAssigned()
	return mu
}

// ClearMember clears all "member" edges to the Member entity.
func (mu *MemberUpdate) ClearMember() *MemberUpdate {
	mu.mutation.ClearMember()
	return mu
}

// RemoveMemberIDs removes the "member" edge to Member entities by IDs.
func (mu *MemberUpdate) RemoveMemberIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveMemberIDs(ids...)
	return mu
}

// RemoveMember removes "member" edges to Member entities.
func (mu *MemberUpdate) RemoveMember(m ...*Member) *MemberUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemberIDs(ids...)
}

// ClearApproved clears the "approved" edge to the Member entity.
func (mu *MemberUpdate) ClearApproved() *MemberUpdate {
	mu.mutation.ClearApproved()
	return mu
}

// ClearApprove clears all "approve" edges to the Member entity.
func (mu *MemberUpdate) ClearApprove() *MemberUpdate {
	mu.mutation.ClearApprove()
	return mu
}

// RemoveApproveIDs removes the "approve" edge to Member entities by IDs.
func (mu *MemberUpdate) RemoveApproveIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveApproveIDs(ids...)
	return mu
}

// RemoveApprove removes "approve" edges to Member entities.
func (mu *MemberUpdate) RemoveApprove(m ...*Member) *MemberUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveApproveIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Status(); ok {
		if err := member.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Member.status": %w`, err)}
		}
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeEnum, value)
	}
	if mu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !mu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   member.TeamsTable,
			Columns: []string{member.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   member.TeamsTable,
			Columns: []string{member.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.AssignedTable,
			Columns: []string{member.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.AssignedTable,
			Columns: []string{member.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberIDs(); len(nodes) > 0 && !mu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ApprovedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.ApprovedTable,
			Columns: []string{member.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ApprovedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.ApprovedTable,
			Columns: []string{member.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedApproveIDs(); len(nodes) > 0 && !mu.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ApproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetTeamID sets the "team_id" field.
func (muo *MemberUpdateOne) SetTeamID(s string) *MemberUpdateOne {
	muo.mutation.SetTeamID(s)
	return muo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableTeamID(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetTeamID(*s)
	}
	return muo
}

// ClearTeamID clears the value of the "team_id" field.
func (muo *MemberUpdateOne) ClearTeamID() *MemberUpdateOne {
	muo.mutation.ClearTeamID()
	return muo
}

// SetAssignedBy sets the "assigned_by" field.
func (muo *MemberUpdateOne) SetAssignedBy(s string) *MemberUpdateOne {
	muo.mutation.SetAssignedBy(s)
	return muo
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableAssignedBy(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetAssignedBy(*s)
	}
	return muo
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (muo *MemberUpdateOne) ClearAssignedBy() *MemberUpdateOne {
	muo.mutation.ClearAssignedBy()
	return muo
}

// SetApprovedBy sets the "approved_by" field.
func (muo *MemberUpdateOne) SetApprovedBy(s string) *MemberUpdateOne {
	muo.mutation.SetApprovedBy(s)
	return muo
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableApprovedBy(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetApprovedBy(*s)
	}
	return muo
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (muo *MemberUpdateOne) ClearApprovedBy() *MemberUpdateOne {
	muo.mutation.ClearApprovedBy()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MemberUpdateOne) SetStatus(m member.Status) *MemberUpdateOne {
	muo.mutation.SetStatus(m)
	return muo
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (muo *MemberUpdateOne) AddTeamIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddTeamIDs(ids...)
	return muo
}

// AddTeam adds the "team" edges to the Team entity.
func (muo *MemberUpdateOne) AddTeam(t ...*Team) *MemberUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTeamIDs(ids...)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (muo *MemberUpdateOne) SetTeamsID(id string) *MemberUpdateOne {
	muo.mutation.SetTeamsID(id)
	return muo
}

// SetNillableTeamsID sets the "teams" edge to the Team entity by ID if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableTeamsID(id *string) *MemberUpdateOne {
	if id != nil {
		muo = muo.SetTeamsID(*id)
	}
	return muo
}

// SetTeams sets the "teams" edge to the Team entity.
func (muo *MemberUpdateOne) SetTeams(t *Team) *MemberUpdateOne {
	return muo.SetTeamsID(t.ID)
}

// SetAssignedID sets the "assigned" edge to the Member entity by ID.
func (muo *MemberUpdateOne) SetAssignedID(id string) *MemberUpdateOne {
	muo.mutation.SetAssignedID(id)
	return muo
}

// SetNillableAssignedID sets the "assigned" edge to the Member entity by ID if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableAssignedID(id *string) *MemberUpdateOne {
	if id != nil {
		muo = muo.SetAssignedID(*id)
	}
	return muo
}

// SetAssigned sets the "assigned" edge to the Member entity.
func (muo *MemberUpdateOne) SetAssigned(m *Member) *MemberUpdateOne {
	return muo.SetAssignedID(m.ID)
}

// AddMemberIDs adds the "member" edge to the Member entity by IDs.
func (muo *MemberUpdateOne) AddMemberIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddMemberIDs(ids...)
	return muo
}

// AddMember adds the "member" edges to the Member entity.
func (muo *MemberUpdateOne) AddMember(m ...*Member) *MemberUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemberIDs(ids...)
}

// SetApprovedID sets the "approved" edge to the Member entity by ID.
func (muo *MemberUpdateOne) SetApprovedID(id string) *MemberUpdateOne {
	muo.mutation.SetApprovedID(id)
	return muo
}

// SetNillableApprovedID sets the "approved" edge to the Member entity by ID if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableApprovedID(id *string) *MemberUpdateOne {
	if id != nil {
		muo = muo.SetApprovedID(*id)
	}
	return muo
}

// SetApproved sets the "approved" edge to the Member entity.
func (muo *MemberUpdateOne) SetApproved(m *Member) *MemberUpdateOne {
	return muo.SetApprovedID(m.ID)
}

// AddApproveIDs adds the "approve" edge to the Member entity by IDs.
func (muo *MemberUpdateOne) AddApproveIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddApproveIDs(ids...)
	return muo
}

// AddApprove adds the "approve" edges to the Member entity.
func (muo *MemberUpdateOne) AddApprove(m ...*Member) *MemberUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddApproveIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearTeam clears all "team" edges to the Team entity.
func (muo *MemberUpdateOne) ClearTeam() *MemberUpdateOne {
	muo.mutation.ClearTeam()
	return muo
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (muo *MemberUpdateOne) RemoveTeamIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveTeamIDs(ids...)
	return muo
}

// RemoveTeam removes "team" edges to Team entities.
func (muo *MemberUpdateOne) RemoveTeam(t ...*Team) *MemberUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTeamIDs(ids...)
}

// ClearTeams clears the "teams" edge to the Team entity.
func (muo *MemberUpdateOne) ClearTeams() *MemberUpdateOne {
	muo.mutation.ClearTeams()
	return muo
}

// ClearAssigned clears the "assigned" edge to the Member entity.
func (muo *MemberUpdateOne) ClearAssigned() *MemberUpdateOne {
	muo.mutation.ClearAssigned()
	return muo
}

// ClearMember clears all "member" edges to the Member entity.
func (muo *MemberUpdateOne) ClearMember() *MemberUpdateOne {
	muo.mutation.ClearMember()
	return muo
}

// RemoveMemberIDs removes the "member" edge to Member entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveMemberIDs(ids...)
	return muo
}

// RemoveMember removes "member" edges to Member entities.
func (muo *MemberUpdateOne) RemoveMember(m ...*Member) *MemberUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemberIDs(ids...)
}

// ClearApproved clears the "approved" edge to the Member entity.
func (muo *MemberUpdateOne) ClearApproved() *MemberUpdateOne {
	muo.mutation.ClearApproved()
	return muo
}

// ClearApprove clears all "approve" edges to the Member entity.
func (muo *MemberUpdateOne) ClearApprove() *MemberUpdateOne {
	muo.mutation.ClearApprove()
	return muo
}

// RemoveApproveIDs removes the "approve" edge to Member entities by IDs.
func (muo *MemberUpdateOne) RemoveApproveIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveApproveIDs(ids...)
	return muo
}

// RemoveApprove removes "approve" edges to Member entities.
func (muo *MemberUpdateOne) RemoveApprove(m ...*Member) *MemberUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveApproveIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Status(); ok {
		if err := member.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Member.status": %w`, err)}
		}
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeEnum, value)
	}
	if muo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !muo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.TeamTable,
			Columns: []string{member.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   member.TeamsTable,
			Columns: []string{member.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   member.TeamsTable,
			Columns: []string{member.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.AssignedTable,
			Columns: []string{member.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.AssignedTable,
			Columns: []string{member.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberIDs(); len(nodes) > 0 && !muo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberTable,
			Columns: []string{member.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ApprovedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.ApprovedTable,
			Columns: []string{member.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ApprovedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.ApprovedTable,
			Columns: []string{member.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedApproveIDs(); len(nodes) > 0 && !muo.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ApproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.ApproveTable,
			Columns: []string{member.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
