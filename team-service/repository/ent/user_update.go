// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-service/repository/ent/predicate"
	"team-service/repository/ent/team"
	"team-service/repository/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetTeamID sets the "team_id" field.
func (uu *UserUpdate) SetTeamID(s string) *UserUpdate {
	uu.mutation.SetTeamID(s)
	return uu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTeamID(s *string) *UserUpdate {
	if s != nil {
		uu.SetTeamID(*s)
	}
	return uu
}

// ClearTeamID clears the value of the "team_id" field.
func (uu *UserUpdate) ClearTeamID() *UserUpdate {
	uu.mutation.ClearTeamID()
	return uu
}

// SetAssignedBy sets the "assigned_by" field.
func (uu *UserUpdate) SetAssignedBy(s string) *UserUpdate {
	uu.mutation.SetAssignedBy(s)
	return uu
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAssignedBy(s *string) *UserUpdate {
	if s != nil {
		uu.SetAssignedBy(*s)
	}
	return uu
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (uu *UserUpdate) ClearAssignedBy() *UserUpdate {
	uu.mutation.ClearAssignedBy()
	return uu
}

// SetApprovedBy sets the "approved_by" field.
func (uu *UserUpdate) SetApprovedBy(s string) *UserUpdate {
	uu.mutation.SetApprovedBy(s)
	return uu
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableApprovedBy(s *string) *UserUpdate {
	if s != nil {
		uu.SetApprovedBy(*s)
	}
	return uu
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (uu *UserUpdate) ClearApprovedBy() *UserUpdate {
	uu.mutation.ClearApprovedBy()
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u user.Status) *UserUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (uu *UserUpdate) AddTeamIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTeamIDs(ids...)
	return uu
}

// AddTeam adds the "team" edges to the Team entity.
func (uu *UserUpdate) AddTeam(t ...*Team) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTeamIDs(ids...)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (uu *UserUpdate) SetTeamsID(id string) *UserUpdate {
	uu.mutation.SetTeamsID(id)
	return uu
}

// SetNillableTeamsID sets the "teams" edge to the Team entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableTeamsID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetTeamsID(*id)
	}
	return uu
}

// SetTeams sets the "teams" edge to the Team entity.
func (uu *UserUpdate) SetTeams(t *Team) *UserUpdate {
	return uu.SetTeamsID(t.ID)
}

// SetAssignedID sets the "assigned" edge to the User entity by ID.
func (uu *UserUpdate) SetAssignedID(id string) *UserUpdate {
	uu.mutation.SetAssignedID(id)
	return uu
}

// SetNillableAssignedID sets the "assigned" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableAssignedID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetAssignedID(*id)
	}
	return uu
}

// SetAssigned sets the "assigned" edge to the User entity.
func (uu *UserUpdate) SetAssigned(u *User) *UserUpdate {
	return uu.SetAssignedID(u.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (uu *UserUpdate) AddUserIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserIDs(ids...)
	return uu
}

// AddUser adds the "user" edges to the User entity.
func (uu *UserUpdate) AddUser(u ...*User) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserIDs(ids...)
}

// SetApprovedID sets the "approved" edge to the User entity by ID.
func (uu *UserUpdate) SetApprovedID(id string) *UserUpdate {
	uu.mutation.SetApprovedID(id)
	return uu
}

// SetNillableApprovedID sets the "approved" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableApprovedID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetApprovedID(*id)
	}
	return uu
}

// SetApproved sets the "approved" edge to the User entity.
func (uu *UserUpdate) SetApproved(u *User) *UserUpdate {
	return uu.SetApprovedID(u.ID)
}

// AddApproveIDs adds the "approve" edge to the User entity by IDs.
func (uu *UserUpdate) AddApproveIDs(ids ...string) *UserUpdate {
	uu.mutation.AddApproveIDs(ids...)
	return uu
}

// AddApprove adds the "approve" edges to the User entity.
func (uu *UserUpdate) AddApprove(u ...*User) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddApproveIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTeam clears all "team" edges to the Team entity.
func (uu *UserUpdate) ClearTeam() *UserUpdate {
	uu.mutation.ClearTeam()
	return uu
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (uu *UserUpdate) RemoveTeamIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTeamIDs(ids...)
	return uu
}

// RemoveTeam removes "team" edges to Team entities.
func (uu *UserUpdate) RemoveTeam(t ...*Team) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTeamIDs(ids...)
}

// ClearTeams clears the "teams" edge to the Team entity.
func (uu *UserUpdate) ClearTeams() *UserUpdate {
	uu.mutation.ClearTeams()
	return uu
}

// ClearAssigned clears the "assigned" edge to the User entity.
func (uu *UserUpdate) ClearAssigned() *UserUpdate {
	uu.mutation.ClearAssigned()
	return uu
}

// ClearUser clears all "user" edges to the User entity.
func (uu *UserUpdate) ClearUser() *UserUpdate {
	uu.mutation.ClearUser()
	return uu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (uu *UserUpdate) RemoveUserIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserIDs(ids...)
	return uu
}

// RemoveUser removes "user" edges to User entities.
func (uu *UserUpdate) RemoveUser(u ...*User) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserIDs(ids...)
}

// ClearApproved clears the "approved" edge to the User entity.
func (uu *UserUpdate) ClearApproved() *UserUpdate {
	uu.mutation.ClearApproved()
	return uu
}

// ClearApprove clears all "approve" edges to the User entity.
func (uu *UserUpdate) ClearApprove() *UserUpdate {
	uu.mutation.ClearApprove()
	return uu
}

// RemoveApproveIDs removes the "approve" edge to User entities by IDs.
func (uu *UserUpdate) RemoveApproveIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveApproveIDs(ids...)
	return uu
}

// RemoveApprove removes "approve" edges to User entities.
func (uu *UserUpdate) RemoveApprove(u ...*User) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveApproveIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if uu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !uu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: []string{user.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: []string{user.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AssignedTable,
			Columns: []string{user.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AssignedTable,
			Columns: []string{user.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserIDs(); len(nodes) > 0 && !uu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApprovedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ApprovedTable,
			Columns: []string{user.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApprovedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ApprovedTable,
			Columns: []string{user.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApproveIDs(); len(nodes) > 0 && !uu.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetTeamID sets the "team_id" field.
func (uuo *UserUpdateOne) SetTeamID(s string) *UserUpdateOne {
	uuo.mutation.SetTeamID(s)
	return uuo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTeamID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTeamID(*s)
	}
	return uuo
}

// ClearTeamID clears the value of the "team_id" field.
func (uuo *UserUpdateOne) ClearTeamID() *UserUpdateOne {
	uuo.mutation.ClearTeamID()
	return uuo
}

// SetAssignedBy sets the "assigned_by" field.
func (uuo *UserUpdateOne) SetAssignedBy(s string) *UserUpdateOne {
	uuo.mutation.SetAssignedBy(s)
	return uuo
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAssignedBy(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAssignedBy(*s)
	}
	return uuo
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (uuo *UserUpdateOne) ClearAssignedBy() *UserUpdateOne {
	uuo.mutation.ClearAssignedBy()
	return uuo
}

// SetApprovedBy sets the "approved_by" field.
func (uuo *UserUpdateOne) SetApprovedBy(s string) *UserUpdateOne {
	uuo.mutation.SetApprovedBy(s)
	return uuo
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableApprovedBy(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetApprovedBy(*s)
	}
	return uuo
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (uuo *UserUpdateOne) ClearApprovedBy() *UserUpdateOne {
	uuo.mutation.ClearApprovedBy()
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u user.Status) *UserUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (uuo *UserUpdateOne) AddTeamIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTeamIDs(ids...)
	return uuo
}

// AddTeam adds the "team" edges to the Team entity.
func (uuo *UserUpdateOne) AddTeam(t ...*Team) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTeamIDs(ids...)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (uuo *UserUpdateOne) SetTeamsID(id string) *UserUpdateOne {
	uuo.mutation.SetTeamsID(id)
	return uuo
}

// SetNillableTeamsID sets the "teams" edge to the Team entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTeamsID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetTeamsID(*id)
	}
	return uuo
}

// SetTeams sets the "teams" edge to the Team entity.
func (uuo *UserUpdateOne) SetTeams(t *Team) *UserUpdateOne {
	return uuo.SetTeamsID(t.ID)
}

// SetAssignedID sets the "assigned" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetAssignedID(id string) *UserUpdateOne {
	uuo.mutation.SetAssignedID(id)
	return uuo
}

// SetNillableAssignedID sets the "assigned" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAssignedID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAssignedID(*id)
	}
	return uuo
}

// SetAssigned sets the "assigned" edge to the User entity.
func (uuo *UserUpdateOne) SetAssigned(u *User) *UserUpdateOne {
	return uuo.SetAssignedID(u.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserIDs(ids...)
	return uuo
}

// AddUser adds the "user" edges to the User entity.
func (uuo *UserUpdateOne) AddUser(u ...*User) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserIDs(ids...)
}

// SetApprovedID sets the "approved" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetApprovedID(id string) *UserUpdateOne {
	uuo.mutation.SetApprovedID(id)
	return uuo
}

// SetNillableApprovedID sets the "approved" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableApprovedID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetApprovedID(*id)
	}
	return uuo
}

// SetApproved sets the "approved" edge to the User entity.
func (uuo *UserUpdateOne) SetApproved(u *User) *UserUpdateOne {
	return uuo.SetApprovedID(u.ID)
}

// AddApproveIDs adds the "approve" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddApproveIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddApproveIDs(ids...)
	return uuo
}

// AddApprove adds the "approve" edges to the User entity.
func (uuo *UserUpdateOne) AddApprove(u ...*User) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddApproveIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTeam clears all "team" edges to the Team entity.
func (uuo *UserUpdateOne) ClearTeam() *UserUpdateOne {
	uuo.mutation.ClearTeam()
	return uuo
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (uuo *UserUpdateOne) RemoveTeamIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTeamIDs(ids...)
	return uuo
}

// RemoveTeam removes "team" edges to Team entities.
func (uuo *UserUpdateOne) RemoveTeam(t ...*Team) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTeamIDs(ids...)
}

// ClearTeams clears the "teams" edge to the Team entity.
func (uuo *UserUpdateOne) ClearTeams() *UserUpdateOne {
	uuo.mutation.ClearTeams()
	return uuo
}

// ClearAssigned clears the "assigned" edge to the User entity.
func (uuo *UserUpdateOne) ClearAssigned() *UserUpdateOne {
	uuo.mutation.ClearAssigned()
	return uuo
}

// ClearUser clears all "user" edges to the User entity.
func (uuo *UserUpdateOne) ClearUser() *UserUpdateOne {
	uuo.mutation.ClearUser()
	return uuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserIDs(ids...)
	return uuo
}

// RemoveUser removes "user" edges to User entities.
func (uuo *UserUpdateOne) RemoveUser(u ...*User) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserIDs(ids...)
}

// ClearApproved clears the "approved" edge to the User entity.
func (uuo *UserUpdateOne) ClearApproved() *UserUpdateOne {
	uuo.mutation.ClearApproved()
	return uuo
}

// ClearApprove clears all "approve" edges to the User entity.
func (uuo *UserUpdateOne) ClearApprove() *UserUpdateOne {
	uuo.mutation.ClearApprove()
	return uuo
}

// RemoveApproveIDs removes the "approve" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveApproveIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveApproveIDs(ids...)
	return uuo
}

// RemoveApprove removes "approve" edges to User entities.
func (uuo *UserUpdateOne) RemoveApprove(u ...*User) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveApproveIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if uuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !uuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: []string{user.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: []string{user.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AssignedTable,
			Columns: []string{user.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AssignedTable,
			Columns: []string{user.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !uuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApprovedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ApprovedTable,
			Columns: []string{user.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApprovedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ApprovedTable,
			Columns: []string{user.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApproveIDs(); len(nodes) > 0 && !uuo.mutation.ApproveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
