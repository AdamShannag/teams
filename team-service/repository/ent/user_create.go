// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-service/repository/ent/team"
	"team-service/repository/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetTeamID sets the "team_id" field.
func (uc *UserCreate) SetTeamID(s string) *UserCreate {
	uc.mutation.SetTeamID(s)
	return uc
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableTeamID(s *string) *UserCreate {
	if s != nil {
		uc.SetTeamID(*s)
	}
	return uc
}

// SetAssignedBy sets the "assigned_by" field.
func (uc *UserCreate) SetAssignedBy(s string) *UserCreate {
	uc.mutation.SetAssignedBy(s)
	return uc
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (uc *UserCreate) SetNillableAssignedBy(s *string) *UserCreate {
	if s != nil {
		uc.SetAssignedBy(*s)
	}
	return uc
}

// SetApprovedBy sets the "approved_by" field.
func (uc *UserCreate) SetApprovedBy(s string) *UserCreate {
	uc.mutation.SetApprovedBy(s)
	return uc
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (uc *UserCreate) SetNillableApprovedBy(s *string) *UserCreate {
	if s != nil {
		uc.SetApprovedBy(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(u user.Status) *UserCreate {
	uc.mutation.SetStatus(u)
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(s string) *UserCreate {
	uc.mutation.SetID(s)
	return uc
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (uc *UserCreate) AddTeamIDs(ids ...string) *UserCreate {
	uc.mutation.AddTeamIDs(ids...)
	return uc
}

// AddTeam adds the "team" edges to the Team entity.
func (uc *UserCreate) AddTeam(t ...*Team) *UserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTeamIDs(ids...)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (uc *UserCreate) SetTeamsID(id string) *UserCreate {
	uc.mutation.SetTeamsID(id)
	return uc
}

// SetNillableTeamsID sets the "teams" edge to the Team entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableTeamsID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetTeamsID(*id)
	}
	return uc
}

// SetTeams sets the "teams" edge to the Team entity.
func (uc *UserCreate) SetTeams(t *Team) *UserCreate {
	return uc.SetTeamsID(t.ID)
}

// SetAssignedID sets the "assigned" edge to the User entity by ID.
func (uc *UserCreate) SetAssignedID(id string) *UserCreate {
	uc.mutation.SetAssignedID(id)
	return uc
}

// SetNillableAssignedID sets the "assigned" edge to the User entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableAssignedID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetAssignedID(*id)
	}
	return uc
}

// SetAssigned sets the "assigned" edge to the User entity.
func (uc *UserCreate) SetAssigned(u *User) *UserCreate {
	return uc.SetAssignedID(u.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (uc *UserCreate) AddUserIDs(ids ...string) *UserCreate {
	uc.mutation.AddUserIDs(ids...)
	return uc
}

// AddUser adds the "user" edges to the User entity.
func (uc *UserCreate) AddUser(u ...*User) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserIDs(ids...)
}

// SetApprovedID sets the "approved" edge to the User entity by ID.
func (uc *UserCreate) SetApprovedID(id string) *UserCreate {
	uc.mutation.SetApprovedID(id)
	return uc
}

// SetNillableApprovedID sets the "approved" edge to the User entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableApprovedID(id *string) *UserCreate {
	if id != nil {
		uc = uc.SetApprovedID(*id)
	}
	return uc
}

// SetApproved sets the "approved" edge to the User entity.
func (uc *UserCreate) SetApproved(u *User) *UserCreate {
	return uc.SetApprovedID(u.ID)
}

// AddApproveIDs adds the "approve" edge to the User entity by IDs.
func (uc *UserCreate) AddApproveIDs(ids ...string) *UserCreate {
	uc.mutation.AddApproveIDs(ids...)
	return uc
}

// AddApprove adds the "approve" edges to the User entity.
func (uc *UserCreate) AddApprove(u ...*User) *UserCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddApproveIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "User.status"`)}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := uc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: []string{user.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AssignedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AssignedTable,
			Columns: []string{user.AssignedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssignedBy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTable,
			Columns: []string{user.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ApprovedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ApprovedTable,
			Columns: []string{user.ApprovedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApprovedBy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ApproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApproveTable,
			Columns: []string{user.ApproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
