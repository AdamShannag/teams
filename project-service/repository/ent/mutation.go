// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-service/repository/ent/attachment"
	"project-service/repository/ent/member"
	"project-service/repository/ent/predicate"
	"project-service/repository/ent/project"
	"project-service/repository/ent/team"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttachment = "Attachment"
	TypeMember     = "Member"
	TypeProject    = "Project"
	TypeTeam       = "Team"
)

// AttachmentMutation represents an operation that mutates the Attachment nodes in the graph.
type AttachmentMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	attachment         *string
	description        *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	insertion          *string
	clearedinsertion   bool
	assignation        *string
	clearedassignation bool
	done               bool
	oldValue           func(context.Context) (*Attachment, error)
	predicates         []predicate.Attachment
}

var _ ent.Mutation = (*AttachmentMutation)(nil)

// attachmentOption allows management of the mutation configuration using functional options.
type attachmentOption func(*AttachmentMutation)

// newAttachmentMutation creates new mutation for the Attachment entity.
func newAttachmentMutation(c config, op Op, opts ...attachmentOption) *AttachmentMutation {
	m := &AttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentID sets the ID field of the mutation.
func withAttachmentID(id string) attachmentOption {
	return func(m *AttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Attachment
		)
		m.oldValue = func(ctx context.Context) (*Attachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachment sets the old Attachment of the mutation.
func withAttachment(node *Attachment) attachmentOption {
	return func(m *AttachmentMutation) {
		m.oldValue = func(context.Context) (*Attachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Attachment entities.
func (m *AttachmentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttachment sets the "attachment" field.
func (m *AttachmentMutation) SetAttachment(s string) {
	m.attachment = &s
}

// Attachment returns the value of the "attachment" field in the mutation.
func (m *AttachmentMutation) Attachment() (r string, exists bool) {
	v := m.attachment
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachment returns the old "attachment" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldAttachment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachment: %w", err)
	}
	return oldValue.Attachment, nil
}

// ResetAttachment resets all changes to the "attachment" field.
func (m *AttachmentMutation) ResetAttachment() {
	m.attachment = nil
}

// SetProjectID sets the "project_id" field.
func (m *AttachmentMutation) SetProjectID(s string) {
	m.assignation = &s
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *AttachmentMutation) ProjectID() (r string, exists bool) {
	v := m.assignation
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldProjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *AttachmentMutation) ResetProjectID() {
	m.assignation = nil
}

// SetDescription sets the "description" field.
func (m *AttachmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AttachmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AttachmentMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[attachment.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AttachmentMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AttachmentMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, attachment.FieldDescription)
}

// SetAddedBy sets the "added_by" field.
func (m *AttachmentMutation) SetAddedBy(s string) {
	m.insertion = &s
}

// AddedBy returns the value of the "added_by" field in the mutation.
func (m *AttachmentMutation) AddedBy() (r string, exists bool) {
	v := m.insertion
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedBy returns the old "added_by" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldAddedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedBy: %w", err)
	}
	return oldValue.AddedBy, nil
}

// ResetAddedBy resets all changes to the "added_by" field.
func (m *AttachmentMutation) ResetAddedBy() {
	m.insertion = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AttachmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AttachmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AttachmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AttachmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AttachmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AttachmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetInsertionID sets the "insertion" edge to the Member entity by id.
func (m *AttachmentMutation) SetInsertionID(id string) {
	m.insertion = &id
}

// ClearInsertion clears the "insertion" edge to the Member entity.
func (m *AttachmentMutation) ClearInsertion() {
	m.clearedinsertion = true
	m.clearedFields[attachment.FieldAddedBy] = struct{}{}
}

// InsertionCleared reports if the "insertion" edge to the Member entity was cleared.
func (m *AttachmentMutation) InsertionCleared() bool {
	return m.clearedinsertion
}

// InsertionID returns the "insertion" edge ID in the mutation.
func (m *AttachmentMutation) InsertionID() (id string, exists bool) {
	if m.insertion != nil {
		return *m.insertion, true
	}
	return
}

// InsertionIDs returns the "insertion" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InsertionID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) InsertionIDs() (ids []string) {
	if id := m.insertion; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInsertion resets all changes to the "insertion" edge.
func (m *AttachmentMutation) ResetInsertion() {
	m.insertion = nil
	m.clearedinsertion = false
}

// SetAssignationID sets the "assignation" edge to the Project entity by id.
func (m *AttachmentMutation) SetAssignationID(id string) {
	m.assignation = &id
}

// ClearAssignation clears the "assignation" edge to the Project entity.
func (m *AttachmentMutation) ClearAssignation() {
	m.clearedassignation = true
	m.clearedFields[attachment.FieldProjectID] = struct{}{}
}

// AssignationCleared reports if the "assignation" edge to the Project entity was cleared.
func (m *AttachmentMutation) AssignationCleared() bool {
	return m.clearedassignation
}

// AssignationID returns the "assignation" edge ID in the mutation.
func (m *AttachmentMutation) AssignationID() (id string, exists bool) {
	if m.assignation != nil {
		return *m.assignation, true
	}
	return
}

// AssignationIDs returns the "assignation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssignationID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) AssignationIDs() (ids []string) {
	if id := m.assignation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssignation resets all changes to the "assignation" edge.
func (m *AttachmentMutation) ResetAssignation() {
	m.assignation = nil
	m.clearedassignation = false
}

// Where appends a list predicates to the AttachmentMutation builder.
func (m *AttachmentMutation) Where(ps ...predicate.Attachment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttachmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttachmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attachment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttachmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttachmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attachment).
func (m *AttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.attachment != nil {
		fields = append(fields, attachment.FieldAttachment)
	}
	if m.assignation != nil {
		fields = append(fields, attachment.FieldProjectID)
	}
	if m.description != nil {
		fields = append(fields, attachment.FieldDescription)
	}
	if m.insertion != nil {
		fields = append(fields, attachment.FieldAddedBy)
	}
	if m.created_at != nil {
		fields = append(fields, attachment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, attachment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldAttachment:
		return m.Attachment()
	case attachment.FieldProjectID:
		return m.ProjectID()
	case attachment.FieldDescription:
		return m.Description()
	case attachment.FieldAddedBy:
		return m.AddedBy()
	case attachment.FieldCreatedAt:
		return m.CreatedAt()
	case attachment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachment.FieldAttachment:
		return m.OldAttachment(ctx)
	case attachment.FieldProjectID:
		return m.OldProjectID(ctx)
	case attachment.FieldDescription:
		return m.OldDescription(ctx)
	case attachment.FieldAddedBy:
		return m.OldAddedBy(ctx)
	case attachment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case attachment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Attachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldAttachment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachment(v)
		return nil
	case attachment.FieldProjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case attachment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case attachment.FieldAddedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedBy(v)
		return nil
	case attachment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case attachment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attachment.FieldDescription) {
		fields = append(fields, attachment.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentMutation) ClearField(name string) error {
	switch name {
	case attachment.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Attachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentMutation) ResetField(name string) error {
	switch name {
	case attachment.FieldAttachment:
		m.ResetAttachment()
		return nil
	case attachment.FieldProjectID:
		m.ResetProjectID()
		return nil
	case attachment.FieldDescription:
		m.ResetDescription()
		return nil
	case attachment.FieldAddedBy:
		m.ResetAddedBy()
		return nil
	case attachment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case attachment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.insertion != nil {
		edges = append(edges, attachment.EdgeInsertion)
	}
	if m.assignation != nil {
		edges = append(edges, attachment.EdgeAssignation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attachment.EdgeInsertion:
		if id := m.insertion; id != nil {
			return []ent.Value{*id}
		}
	case attachment.EdgeAssignation:
		if id := m.assignation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinsertion {
		edges = append(edges, attachment.EdgeInsertion)
	}
	if m.clearedassignation {
		edges = append(edges, attachment.EdgeAssignation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentMutation) EdgeCleared(name string) bool {
	switch name {
	case attachment.EdgeInsertion:
		return m.clearedinsertion
	case attachment.EdgeAssignation:
		return m.clearedassignation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentMutation) ClearEdge(name string) error {
	switch name {
	case attachment.EdgeInsertion:
		m.ClearInsertion()
		return nil
	case attachment.EdgeAssignation:
		m.ClearAssignation()
		return nil
	}
	return fmt.Errorf("unknown Attachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentMutation) ResetEdge(name string) error {
	switch name {
	case attachment.EdgeInsertion:
		m.ResetInsertion()
		return nil
	case attachment.EdgeAssignation:
		m.ResetAssignation()
		return nil
	}
	return fmt.Errorf("unknown Attachment edge %s", name)
}

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op            Op
	typ           string
	id            *string
	clearedFields map[string]struct{}
	create        map[string]struct{}
	removedcreate map[string]struct{}
	clearedcreate bool
	assign        map[string]struct{}
	removedassign map[string]struct{}
	clearedassign bool
	add           map[string]struct{}
	removedadd    map[string]struct{}
	clearedadd    bool
	done          bool
	oldValue      func(context.Context) (*Member, error)
	predicates    []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id string) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Member entities.
func (m *MemberMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Member.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddCreateIDs adds the "create" edge to the Project entity by ids.
func (m *MemberMutation) AddCreateIDs(ids ...string) {
	if m.create == nil {
		m.create = make(map[string]struct{})
	}
	for i := range ids {
		m.create[ids[i]] = struct{}{}
	}
}

// ClearCreate clears the "create" edge to the Project entity.
func (m *MemberMutation) ClearCreate() {
	m.clearedcreate = true
}

// CreateCleared reports if the "create" edge to the Project entity was cleared.
func (m *MemberMutation) CreateCleared() bool {
	return m.clearedcreate
}

// RemoveCreateIDs removes the "create" edge to the Project entity by IDs.
func (m *MemberMutation) RemoveCreateIDs(ids ...string) {
	if m.removedcreate == nil {
		m.removedcreate = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.create, ids[i])
		m.removedcreate[ids[i]] = struct{}{}
	}
}

// RemovedCreate returns the removed IDs of the "create" edge to the Project entity.
func (m *MemberMutation) RemovedCreateIDs() (ids []string) {
	for id := range m.removedcreate {
		ids = append(ids, id)
	}
	return
}

// CreateIDs returns the "create" edge IDs in the mutation.
func (m *MemberMutation) CreateIDs() (ids []string) {
	for id := range m.create {
		ids = append(ids, id)
	}
	return
}

// ResetCreate resets all changes to the "create" edge.
func (m *MemberMutation) ResetCreate() {
	m.create = nil
	m.clearedcreate = false
	m.removedcreate = nil
}

// AddAssignIDs adds the "assign" edge to the Team entity by ids.
func (m *MemberMutation) AddAssignIDs(ids ...string) {
	if m.assign == nil {
		m.assign = make(map[string]struct{})
	}
	for i := range ids {
		m.assign[ids[i]] = struct{}{}
	}
}

// ClearAssign clears the "assign" edge to the Team entity.
func (m *MemberMutation) ClearAssign() {
	m.clearedassign = true
}

// AssignCleared reports if the "assign" edge to the Team entity was cleared.
func (m *MemberMutation) AssignCleared() bool {
	return m.clearedassign
}

// RemoveAssignIDs removes the "assign" edge to the Team entity by IDs.
func (m *MemberMutation) RemoveAssignIDs(ids ...string) {
	if m.removedassign == nil {
		m.removedassign = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.assign, ids[i])
		m.removedassign[ids[i]] = struct{}{}
	}
}

// RemovedAssign returns the removed IDs of the "assign" edge to the Team entity.
func (m *MemberMutation) RemovedAssignIDs() (ids []string) {
	for id := range m.removedassign {
		ids = append(ids, id)
	}
	return
}

// AssignIDs returns the "assign" edge IDs in the mutation.
func (m *MemberMutation) AssignIDs() (ids []string) {
	for id := range m.assign {
		ids = append(ids, id)
	}
	return
}

// ResetAssign resets all changes to the "assign" edge.
func (m *MemberMutation) ResetAssign() {
	m.assign = nil
	m.clearedassign = false
	m.removedassign = nil
}

// AddAddIDs adds the "add" edge to the Attachment entity by ids.
func (m *MemberMutation) AddAddIDs(ids ...string) {
	if m.add == nil {
		m.add = make(map[string]struct{})
	}
	for i := range ids {
		m.add[ids[i]] = struct{}{}
	}
}

// ClearAdd clears the "add" edge to the Attachment entity.
func (m *MemberMutation) ClearAdd() {
	m.clearedadd = true
}

// AddCleared reports if the "add" edge to the Attachment entity was cleared.
func (m *MemberMutation) AddCleared() bool {
	return m.clearedadd
}

// RemoveAddIDs removes the "add" edge to the Attachment entity by IDs.
func (m *MemberMutation) RemoveAddIDs(ids ...string) {
	if m.removedadd == nil {
		m.removedadd = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.add, ids[i])
		m.removedadd[ids[i]] = struct{}{}
	}
}

// RemovedAdd returns the removed IDs of the "add" edge to the Attachment entity.
func (m *MemberMutation) RemovedAddIDs() (ids []string) {
	for id := range m.removedadd {
		ids = append(ids, id)
	}
	return
}

// AddIDs returns the "add" edge IDs in the mutation.
func (m *MemberMutation) AddIDs() (ids []string) {
	for id := range m.add {
		ids = append(ids, id)
	}
	return
}

// ResetAdd resets all changes to the "add" edge.
func (m *MemberMutation) ResetAdd() {
	m.add = nil
	m.clearedadd = false
	m.removedadd = nil
}

// Where appends a list predicates to the MemberMutation builder.
func (m *MemberMutation) Where(ps ...predicate.Member) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Member, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.create != nil {
		edges = append(edges, member.EdgeCreate)
	}
	if m.assign != nil {
		edges = append(edges, member.EdgeAssign)
	}
	if m.add != nil {
		edges = append(edges, member.EdgeAdd)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case member.EdgeCreate:
		ids := make([]ent.Value, 0, len(m.create))
		for id := range m.create {
			ids = append(ids, id)
		}
		return ids
	case member.EdgeAssign:
		ids := make([]ent.Value, 0, len(m.assign))
		for id := range m.assign {
			ids = append(ids, id)
		}
		return ids
	case member.EdgeAdd:
		ids := make([]ent.Value, 0, len(m.add))
		for id := range m.add {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcreate != nil {
		edges = append(edges, member.EdgeCreate)
	}
	if m.removedassign != nil {
		edges = append(edges, member.EdgeAssign)
	}
	if m.removedadd != nil {
		edges = append(edges, member.EdgeAdd)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case member.EdgeCreate:
		ids := make([]ent.Value, 0, len(m.removedcreate))
		for id := range m.removedcreate {
			ids = append(ids, id)
		}
		return ids
	case member.EdgeAssign:
		ids := make([]ent.Value, 0, len(m.removedassign))
		for id := range m.removedassign {
			ids = append(ids, id)
		}
		return ids
	case member.EdgeAdd:
		ids := make([]ent.Value, 0, len(m.removedadd))
		for id := range m.removedadd {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcreate {
		edges = append(edges, member.EdgeCreate)
	}
	if m.clearedassign {
		edges = append(edges, member.EdgeAssign)
	}
	if m.clearedadd {
		edges = append(edges, member.EdgeAdd)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	switch name {
	case member.EdgeCreate:
		return m.clearedcreate
	case member.EdgeAssign:
		return m.clearedassign
	case member.EdgeAdd:
		return m.clearedadd
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	switch name {
	case member.EdgeCreate:
		m.ResetCreate()
		return nil
	case member.EdgeAssign:
		m.ResetAssign()
		return nil
	case member.EdgeAdd:
		m.ResetAdd()
		return nil
	}
	return fmt.Errorf("unknown Member edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                Op
	typ               string
	id                *string
	name              *string
	image             *string
	description       *string
	status            *project.Status
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	creation          *string
	clearedcreation   bool
	assigned          map[string]struct{}
	removedassigned   map[string]struct{}
	clearedassigned   bool
	attachment        map[string]struct{}
	removedattachment map[string]struct{}
	clearedattachment bool
	done              bool
	oldValue          func(context.Context) (*Project, error)
	predicates        []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id string) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetImage sets the "image" field.
func (m *ProjectMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ProjectMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ProjectMutation) ResetImage() {
	m.image = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *ProjectMutation) SetStatus(pr project.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProjectMutation) Status() (r project.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldStatus(ctx context.Context) (v project.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProjectMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *ProjectMutation) SetCreatedBy(s string) {
	m.creation = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *ProjectMutation) CreatedBy() (r string, exists bool) {
	v := m.creation
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *ProjectMutation) ResetCreatedBy() {
	m.creation = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreationID sets the "creation" edge to the Member entity by id.
func (m *ProjectMutation) SetCreationID(id string) {
	m.creation = &id
}

// ClearCreation clears the "creation" edge to the Member entity.
func (m *ProjectMutation) ClearCreation() {
	m.clearedcreation = true
	m.clearedFields[project.FieldCreatedBy] = struct{}{}
}

// CreationCleared reports if the "creation" edge to the Member entity was cleared.
func (m *ProjectMutation) CreationCleared() bool {
	return m.clearedcreation
}

// CreationID returns the "creation" edge ID in the mutation.
func (m *ProjectMutation) CreationID() (id string, exists bool) {
	if m.creation != nil {
		return *m.creation, true
	}
	return
}

// CreationIDs returns the "creation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreationID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) CreationIDs() (ids []string) {
	if id := m.creation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreation resets all changes to the "creation" edge.
func (m *ProjectMutation) ResetCreation() {
	m.creation = nil
	m.clearedcreation = false
}

// AddAssignedIDs adds the "assigned" edge to the Team entity by ids.
func (m *ProjectMutation) AddAssignedIDs(ids ...string) {
	if m.assigned == nil {
		m.assigned = make(map[string]struct{})
	}
	for i := range ids {
		m.assigned[ids[i]] = struct{}{}
	}
}

// ClearAssigned clears the "assigned" edge to the Team entity.
func (m *ProjectMutation) ClearAssigned() {
	m.clearedassigned = true
}

// AssignedCleared reports if the "assigned" edge to the Team entity was cleared.
func (m *ProjectMutation) AssignedCleared() bool {
	return m.clearedassigned
}

// RemoveAssignedIDs removes the "assigned" edge to the Team entity by IDs.
func (m *ProjectMutation) RemoveAssignedIDs(ids ...string) {
	if m.removedassigned == nil {
		m.removedassigned = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.assigned, ids[i])
		m.removedassigned[ids[i]] = struct{}{}
	}
}

// RemovedAssigned returns the removed IDs of the "assigned" edge to the Team entity.
func (m *ProjectMutation) RemovedAssignedIDs() (ids []string) {
	for id := range m.removedassigned {
		ids = append(ids, id)
	}
	return
}

// AssignedIDs returns the "assigned" edge IDs in the mutation.
func (m *ProjectMutation) AssignedIDs() (ids []string) {
	for id := range m.assigned {
		ids = append(ids, id)
	}
	return
}

// ResetAssigned resets all changes to the "assigned" edge.
func (m *ProjectMutation) ResetAssigned() {
	m.assigned = nil
	m.clearedassigned = false
	m.removedassigned = nil
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by ids.
func (m *ProjectMutation) AddAttachmentIDs(ids ...string) {
	if m.attachment == nil {
		m.attachment = make(map[string]struct{})
	}
	for i := range ids {
		m.attachment[ids[i]] = struct{}{}
	}
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (m *ProjectMutation) ClearAttachment() {
	m.clearedattachment = true
}

// AttachmentCleared reports if the "attachment" edge to the Attachment entity was cleared.
func (m *ProjectMutation) AttachmentCleared() bool {
	return m.clearedattachment
}

// RemoveAttachmentIDs removes the "attachment" edge to the Attachment entity by IDs.
func (m *ProjectMutation) RemoveAttachmentIDs(ids ...string) {
	if m.removedattachment == nil {
		m.removedattachment = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.attachment, ids[i])
		m.removedattachment[ids[i]] = struct{}{}
	}
}

// RemovedAttachment returns the removed IDs of the "attachment" edge to the Attachment entity.
func (m *ProjectMutation) RemovedAttachmentIDs() (ids []string) {
	for id := range m.removedattachment {
		ids = append(ids, id)
	}
	return
}

// AttachmentIDs returns the "attachment" edge IDs in the mutation.
func (m *ProjectMutation) AttachmentIDs() (ids []string) {
	for id := range m.attachment {
		ids = append(ids, id)
	}
	return
}

// ResetAttachment resets all changes to the "attachment" edge.
func (m *ProjectMutation) ResetAttachment() {
	m.attachment = nil
	m.clearedattachment = false
	m.removedattachment = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.image != nil {
		fields = append(fields, project.FieldImage)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, project.FieldStatus)
	}
	if m.creation != nil {
		fields = append(fields, project.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldName:
		return m.Name()
	case project.FieldImage:
		return m.Image()
	case project.FieldDescription:
		return m.Description()
	case project.FieldStatus:
		return m.Status()
	case project.FieldCreatedBy:
		return m.CreatedBy()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldImage:
		return m.OldImage(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldStatus:
		return m.OldStatus(ctx)
	case project.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldStatus:
		v, ok := value.(project.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case project.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldImage:
		m.ResetImage()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldStatus:
		m.ResetStatus()
		return nil
	case project.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.creation != nil {
		edges = append(edges, project.EdgeCreation)
	}
	if m.assigned != nil {
		edges = append(edges, project.EdgeAssigned)
	}
	if m.attachment != nil {
		edges = append(edges, project.EdgeAttachment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeCreation:
		if id := m.creation; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeAssigned:
		ids := make([]ent.Value, 0, len(m.assigned))
		for id := range m.assigned {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeAttachment:
		ids := make([]ent.Value, 0, len(m.attachment))
		for id := range m.attachment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedassigned != nil {
		edges = append(edges, project.EdgeAssigned)
	}
	if m.removedattachment != nil {
		edges = append(edges, project.EdgeAttachment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeAssigned:
		ids := make([]ent.Value, 0, len(m.removedassigned))
		for id := range m.removedassigned {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeAttachment:
		ids := make([]ent.Value, 0, len(m.removedattachment))
		for id := range m.removedattachment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcreation {
		edges = append(edges, project.EdgeCreation)
	}
	if m.clearedassigned {
		edges = append(edges, project.EdgeAssigned)
	}
	if m.clearedattachment {
		edges = append(edges, project.EdgeAttachment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeCreation:
		return m.clearedcreation
	case project.EdgeAssigned:
		return m.clearedassigned
	case project.EdgeAttachment:
		return m.clearedattachment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeCreation:
		m.ClearCreation()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeCreation:
		m.ResetCreation()
		return nil
	case project.EdgeAssigned:
		m.ResetAssigned()
		return nil
	case project.EdgeAttachment:
		m.ResetAttachment()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	status             *team.Status
	assigned_at        *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	assignBy           *string
	clearedassignBy    bool
	assignation        *string
	clearedassignation bool
	done               bool
	oldValue           func(context.Context) (*Team, error)
	predicates         []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id string) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Team entities.
func (m *TeamMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProjectID sets the "project_id" field.
func (m *TeamMutation) SetProjectID(s string) {
	m.assignation = &s
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *TeamMutation) ProjectID() (r string, exists bool) {
	v := m.assignation
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldProjectID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ClearProjectID clears the value of the "project_id" field.
func (m *TeamMutation) ClearProjectID() {
	m.assignation = nil
	m.clearedFields[team.FieldProjectID] = struct{}{}
}

// ProjectIDCleared returns if the "project_id" field was cleared in this mutation.
func (m *TeamMutation) ProjectIDCleared() bool {
	_, ok := m.clearedFields[team.FieldProjectID]
	return ok
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *TeamMutation) ResetProjectID() {
	m.assignation = nil
	delete(m.clearedFields, team.FieldProjectID)
}

// SetStatus sets the "status" field.
func (m *TeamMutation) SetStatus(t team.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TeamMutation) Status() (r team.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldStatus(ctx context.Context) (v team.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TeamMutation) ResetStatus() {
	m.status = nil
}

// SetAssignedBy sets the "assigned_by" field.
func (m *TeamMutation) SetAssignedBy(s string) {
	m.assignBy = &s
}

// AssignedBy returns the value of the "assigned_by" field in the mutation.
func (m *TeamMutation) AssignedBy() (r string, exists bool) {
	v := m.assignBy
	if v == nil {
		return
	}
	return *v, true
}

// OldAssignedBy returns the old "assigned_by" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldAssignedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssignedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssignedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssignedBy: %w", err)
	}
	return oldValue.AssignedBy, nil
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (m *TeamMutation) ClearAssignedBy() {
	m.assignBy = nil
	m.clearedFields[team.FieldAssignedBy] = struct{}{}
}

// AssignedByCleared returns if the "assigned_by" field was cleared in this mutation.
func (m *TeamMutation) AssignedByCleared() bool {
	_, ok := m.clearedFields[team.FieldAssignedBy]
	return ok
}

// ResetAssignedBy resets all changes to the "assigned_by" field.
func (m *TeamMutation) ResetAssignedBy() {
	m.assignBy = nil
	delete(m.clearedFields, team.FieldAssignedBy)
}

// SetAssignedAt sets the "assigned_at" field.
func (m *TeamMutation) SetAssignedAt(t time.Time) {
	m.assigned_at = &t
}

// AssignedAt returns the value of the "assigned_at" field in the mutation.
func (m *TeamMutation) AssignedAt() (r time.Time, exists bool) {
	v := m.assigned_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAssignedAt returns the old "assigned_at" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldAssignedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssignedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssignedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssignedAt: %w", err)
	}
	return oldValue.AssignedAt, nil
}

// ResetAssignedAt resets all changes to the "assigned_at" field.
func (m *TeamMutation) ResetAssignedAt() {
	m.assigned_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAssignByID sets the "assignBy" edge to the Member entity by id.
func (m *TeamMutation) SetAssignByID(id string) {
	m.assignBy = &id
}

// ClearAssignBy clears the "assignBy" edge to the Member entity.
func (m *TeamMutation) ClearAssignBy() {
	m.clearedassignBy = true
	m.clearedFields[team.FieldAssignedBy] = struct{}{}
}

// AssignByCleared reports if the "assignBy" edge to the Member entity was cleared.
func (m *TeamMutation) AssignByCleared() bool {
	return m.AssignedByCleared() || m.clearedassignBy
}

// AssignByID returns the "assignBy" edge ID in the mutation.
func (m *TeamMutation) AssignByID() (id string, exists bool) {
	if m.assignBy != nil {
		return *m.assignBy, true
	}
	return
}

// AssignByIDs returns the "assignBy" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssignByID instead. It exists only for internal usage by the builders.
func (m *TeamMutation) AssignByIDs() (ids []string) {
	if id := m.assignBy; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssignBy resets all changes to the "assignBy" edge.
func (m *TeamMutation) ResetAssignBy() {
	m.assignBy = nil
	m.clearedassignBy = false
}

// SetAssignationID sets the "assignation" edge to the Project entity by id.
func (m *TeamMutation) SetAssignationID(id string) {
	m.assignation = &id
}

// ClearAssignation clears the "assignation" edge to the Project entity.
func (m *TeamMutation) ClearAssignation() {
	m.clearedassignation = true
	m.clearedFields[team.FieldProjectID] = struct{}{}
}

// AssignationCleared reports if the "assignation" edge to the Project entity was cleared.
func (m *TeamMutation) AssignationCleared() bool {
	return m.ProjectIDCleared() || m.clearedassignation
}

// AssignationID returns the "assignation" edge ID in the mutation.
func (m *TeamMutation) AssignationID() (id string, exists bool) {
	if m.assignation != nil {
		return *m.assignation, true
	}
	return
}

// AssignationIDs returns the "assignation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssignationID instead. It exists only for internal usage by the builders.
func (m *TeamMutation) AssignationIDs() (ids []string) {
	if id := m.assignation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssignation resets all changes to the "assignation" edge.
func (m *TeamMutation) ResetAssignation() {
	m.assignation = nil
	m.clearedassignation = false
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TeamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TeamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Team, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TeamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.assignation != nil {
		fields = append(fields, team.FieldProjectID)
	}
	if m.status != nil {
		fields = append(fields, team.FieldStatus)
	}
	if m.assignBy != nil {
		fields = append(fields, team.FieldAssignedBy)
	}
	if m.assigned_at != nil {
		fields = append(fields, team.FieldAssignedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, team.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldProjectID:
		return m.ProjectID()
	case team.FieldStatus:
		return m.Status()
	case team.FieldAssignedBy:
		return m.AssignedBy()
	case team.FieldAssignedAt:
		return m.AssignedAt()
	case team.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldProjectID:
		return m.OldProjectID(ctx)
	case team.FieldStatus:
		return m.OldStatus(ctx)
	case team.FieldAssignedBy:
		return m.OldAssignedBy(ctx)
	case team.FieldAssignedAt:
		return m.OldAssignedAt(ctx)
	case team.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldProjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case team.FieldStatus:
		v, ok := value.(team.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case team.FieldAssignedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssignedBy(v)
		return nil
	case team.FieldAssignedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssignedAt(v)
		return nil
	case team.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(team.FieldProjectID) {
		fields = append(fields, team.FieldProjectID)
	}
	if m.FieldCleared(team.FieldAssignedBy) {
		fields = append(fields, team.FieldAssignedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	switch name {
	case team.FieldProjectID:
		m.ClearProjectID()
		return nil
	case team.FieldAssignedBy:
		m.ClearAssignedBy()
		return nil
	}
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldProjectID:
		m.ResetProjectID()
		return nil
	case team.FieldStatus:
		m.ResetStatus()
		return nil
	case team.FieldAssignedBy:
		m.ResetAssignedBy()
		return nil
	case team.FieldAssignedAt:
		m.ResetAssignedAt()
		return nil
	case team.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.assignBy != nil {
		edges = append(edges, team.EdgeAssignBy)
	}
	if m.assignation != nil {
		edges = append(edges, team.EdgeAssignation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeAssignBy:
		if id := m.assignBy; id != nil {
			return []ent.Value{*id}
		}
	case team.EdgeAssignation:
		if id := m.assignation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedassignBy {
		edges = append(edges, team.EdgeAssignBy)
	}
	if m.clearedassignation {
		edges = append(edges, team.EdgeAssignation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgeAssignBy:
		return m.clearedassignBy
	case team.EdgeAssignation:
		return m.clearedassignation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	case team.EdgeAssignBy:
		m.ClearAssignBy()
		return nil
	case team.EdgeAssignation:
		m.ClearAssignation()
		return nil
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgeAssignBy:
		m.ResetAssignBy()
		return nil
	case team.EdgeAssignation:
		m.ResetAssignation()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}
