// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-service/repository/ent/attachment"
	"project-service/repository/ent/member"
	"project-service/repository/ent/predicate"
	"project-service/repository/ent/project"
	"project-service/repository/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// AddCreateIDs adds the "create" edge to the Project entity by IDs.
func (mu *MemberUpdate) AddCreateIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddCreateIDs(ids...)
	return mu
}

// AddCreate adds the "create" edges to the Project entity.
func (mu *MemberUpdate) AddCreate(p ...*Project) *MemberUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddCreateIDs(ids...)
}

// AddAssignIDs adds the "assign" edge to the Team entity by IDs.
func (mu *MemberUpdate) AddAssignIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddAssignIDs(ids...)
	return mu
}

// AddAssign adds the "assign" edges to the Team entity.
func (mu *MemberUpdate) AddAssign(t ...*Team) *MemberUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddAssignIDs(ids...)
}

// AddAddIDs adds the "add" edge to the Attachment entity by IDs.
func (mu *MemberUpdate) AddAddIDs(ids ...string) *MemberUpdate {
	mu.mutation.AddAddIDs(ids...)
	return mu
}

// AddAdd adds the "add" edges to the Attachment entity.
func (mu *MemberUpdate) AddAdd(a ...*Attachment) *MemberUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddAddIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearCreate clears all "create" edges to the Project entity.
func (mu *MemberUpdate) ClearCreate() *MemberUpdate {
	mu.mutation.ClearCreate()
	return mu
}

// RemoveCreateIDs removes the "create" edge to Project entities by IDs.
func (mu *MemberUpdate) RemoveCreateIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveCreateIDs(ids...)
	return mu
}

// RemoveCreate removes "create" edges to Project entities.
func (mu *MemberUpdate) RemoveCreate(p ...*Project) *MemberUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveCreateIDs(ids...)
}

// ClearAssign clears all "assign" edges to the Team entity.
func (mu *MemberUpdate) ClearAssign() *MemberUpdate {
	mu.mutation.ClearAssign()
	return mu
}

// RemoveAssignIDs removes the "assign" edge to Team entities by IDs.
func (mu *MemberUpdate) RemoveAssignIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveAssignIDs(ids...)
	return mu
}

// RemoveAssign removes "assign" edges to Team entities.
func (mu *MemberUpdate) RemoveAssign(t ...*Team) *MemberUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveAssignIDs(ids...)
}

// ClearAdd clears all "add" edges to the Attachment entity.
func (mu *MemberUpdate) ClearAdd() *MemberUpdate {
	mu.mutation.ClearAdd()
	return mu
}

// RemoveAddIDs removes the "add" edge to Attachment entities by IDs.
func (mu *MemberUpdate) RemoveAddIDs(ids ...string) *MemberUpdate {
	mu.mutation.RemoveAddIDs(ids...)
	return mu
}

// RemoveAdd removes "add" edges to Attachment entities.
func (mu *MemberUpdate) RemoveAdd(a ...*Attachment) *MemberUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveAddIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.CreateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.CreateTable,
			Columns: []string{member.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCreateIDs(); len(nodes) > 0 && !mu.mutation.CreateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.CreateTable,
			Columns: []string{member.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CreateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.CreateTable,
			Columns: []string{member.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AssignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AssignTable,
			Columns: []string{member.AssignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedAssignIDs(); len(nodes) > 0 && !mu.mutation.AssignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AssignTable,
			Columns: []string{member.AssignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AssignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AssignTable,
			Columns: []string{member.AssignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AddCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AddTable,
			Columns: []string{member.AddColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedAddIDs(); len(nodes) > 0 && !mu.mutation.AddCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AddTable,
			Columns: []string{member.AddColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AddIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AddTable,
			Columns: []string{member.AddColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// AddCreateIDs adds the "create" edge to the Project entity by IDs.
func (muo *MemberUpdateOne) AddCreateIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddCreateIDs(ids...)
	return muo
}

// AddCreate adds the "create" edges to the Project entity.
func (muo *MemberUpdateOne) AddCreate(p ...*Project) *MemberUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddCreateIDs(ids...)
}

// AddAssignIDs adds the "assign" edge to the Team entity by IDs.
func (muo *MemberUpdateOne) AddAssignIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddAssignIDs(ids...)
	return muo
}

// AddAssign adds the "assign" edges to the Team entity.
func (muo *MemberUpdateOne) AddAssign(t ...*Team) *MemberUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddAssignIDs(ids...)
}

// AddAddIDs adds the "add" edge to the Attachment entity by IDs.
func (muo *MemberUpdateOne) AddAddIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.AddAddIDs(ids...)
	return muo
}

// AddAdd adds the "add" edges to the Attachment entity.
func (muo *MemberUpdateOne) AddAdd(a ...*Attachment) *MemberUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddAddIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearCreate clears all "create" edges to the Project entity.
func (muo *MemberUpdateOne) ClearCreate() *MemberUpdateOne {
	muo.mutation.ClearCreate()
	return muo
}

// RemoveCreateIDs removes the "create" edge to Project entities by IDs.
func (muo *MemberUpdateOne) RemoveCreateIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveCreateIDs(ids...)
	return muo
}

// RemoveCreate removes "create" edges to Project entities.
func (muo *MemberUpdateOne) RemoveCreate(p ...*Project) *MemberUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveCreateIDs(ids...)
}

// ClearAssign clears all "assign" edges to the Team entity.
func (muo *MemberUpdateOne) ClearAssign() *MemberUpdateOne {
	muo.mutation.ClearAssign()
	return muo
}

// RemoveAssignIDs removes the "assign" edge to Team entities by IDs.
func (muo *MemberUpdateOne) RemoveAssignIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveAssignIDs(ids...)
	return muo
}

// RemoveAssign removes "assign" edges to Team entities.
func (muo *MemberUpdateOne) RemoveAssign(t ...*Team) *MemberUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveAssignIDs(ids...)
}

// ClearAdd clears all "add" edges to the Attachment entity.
func (muo *MemberUpdateOne) ClearAdd() *MemberUpdateOne {
	muo.mutation.ClearAdd()
	return muo
}

// RemoveAddIDs removes the "add" edge to Attachment entities by IDs.
func (muo *MemberUpdateOne) RemoveAddIDs(ids ...string) *MemberUpdateOne {
	muo.mutation.RemoveAddIDs(ids...)
	return muo
}

// RemoveAdd removes "add" edges to Attachment entities.
func (muo *MemberUpdateOne) RemoveAdd(a ...*Attachment) *MemberUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveAddIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.CreateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.CreateTable,
			Columns: []string{member.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCreateIDs(); len(nodes) > 0 && !muo.mutation.CreateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.CreateTable,
			Columns: []string{member.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CreateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.CreateTable,
			Columns: []string{member.CreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AssignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AssignTable,
			Columns: []string{member.AssignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedAssignIDs(); len(nodes) > 0 && !muo.mutation.AssignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AssignTable,
			Columns: []string{member.AssignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AssignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AssignTable,
			Columns: []string{member.AssignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AddCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AddTable,
			Columns: []string{member.AddColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedAddIDs(); len(nodes) > 0 && !muo.mutation.AddCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AddTable,
			Columns: []string{member.AddColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AddIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   member.AddTable,
			Columns: []string{member.AddColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
