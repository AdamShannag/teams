// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-service/repository/ent/attachment"
	"project-service/repository/ent/member"
	"project-service/repository/ent/predicate"
	"project-service/repository/ent/project"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *AttachmentMutation
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (au *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAttachment sets the "attachment" field.
func (au *AttachmentUpdate) SetAttachment(s string) *AttachmentUpdate {
	au.mutation.SetAttachment(s)
	return au
}

// SetProjectID sets the "project_id" field.
func (au *AttachmentUpdate) SetProjectID(s string) *AttachmentUpdate {
	au.mutation.SetProjectID(s)
	return au
}

// SetDescription sets the "description" field.
func (au *AttachmentUpdate) SetDescription(s string) *AttachmentUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableDescription(s *string) *AttachmentUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AttachmentUpdate) ClearDescription() *AttachmentUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetAddedBy sets the "added_by" field.
func (au *AttachmentUpdate) SetAddedBy(s string) *AttachmentUpdate {
	au.mutation.SetAddedBy(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttachmentUpdate) SetUpdatedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableUpdatedAt(t *time.Time) *AttachmentUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// SetInsertionID sets the "insertion" edge to the Member entity by ID.
func (au *AttachmentUpdate) SetInsertionID(id string) *AttachmentUpdate {
	au.mutation.SetInsertionID(id)
	return au
}

// SetInsertion sets the "insertion" edge to the Member entity.
func (au *AttachmentUpdate) SetInsertion(m *Member) *AttachmentUpdate {
	return au.SetInsertionID(m.ID)
}

// SetAssignationID sets the "assignation" edge to the Project entity by ID.
func (au *AttachmentUpdate) SetAssignationID(id string) *AttachmentUpdate {
	au.mutation.SetAssignationID(id)
	return au
}

// SetAssignation sets the "assignation" edge to the Project entity.
func (au *AttachmentUpdate) SetAssignation(p *Project) *AttachmentUpdate {
	return au.SetAssignationID(p.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (au *AttachmentUpdate) Mutation() *AttachmentMutation {
	return au.mutation
}

// ClearInsertion clears the "insertion" edge to the Member entity.
func (au *AttachmentUpdate) ClearInsertion() *AttachmentUpdate {
	au.mutation.ClearInsertion()
	return au
}

// ClearAssignation clears the "assignation" edge to the Project entity.
func (au *AttachmentUpdate) ClearAssignation() *AttachmentUpdate {
	au.mutation.ClearAssignation()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttachmentUpdate) check() error {
	if _, ok := au.mutation.InsertionID(); au.mutation.InsertionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.insertion"`)
	}
	if _, ok := au.mutation.AssignationID(); au.mutation.AssignationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.assignation"`)
	}
	return nil
}

func (au *AttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Attachment(); ok {
		_spec.SetField(attachment.FieldAttachment, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(attachment.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(attachment.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.InsertionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.InsertionTable,
			Columns: []string{attachment.InsertionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.InsertionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.InsertionTable,
			Columns: []string{attachment.InsertionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssignationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.AssignationTable,
			Columns: []string{attachment.AssignationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssignationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.AssignationTable,
			Columns: []string{attachment.AssignationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttachmentMutation
}

// SetAttachment sets the "attachment" field.
func (auo *AttachmentUpdateOne) SetAttachment(s string) *AttachmentUpdateOne {
	auo.mutation.SetAttachment(s)
	return auo
}

// SetProjectID sets the "project_id" field.
func (auo *AttachmentUpdateOne) SetProjectID(s string) *AttachmentUpdateOne {
	auo.mutation.SetProjectID(s)
	return auo
}

// SetDescription sets the "description" field.
func (auo *AttachmentUpdateOne) SetDescription(s string) *AttachmentUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableDescription(s *string) *AttachmentUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AttachmentUpdateOne) ClearDescription() *AttachmentUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetAddedBy sets the "added_by" field.
func (auo *AttachmentUpdateOne) SetAddedBy(s string) *AttachmentUpdateOne {
	auo.mutation.SetAddedBy(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttachmentUpdateOne) SetUpdatedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableUpdatedAt(t *time.Time) *AttachmentUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// SetInsertionID sets the "insertion" edge to the Member entity by ID.
func (auo *AttachmentUpdateOne) SetInsertionID(id string) *AttachmentUpdateOne {
	auo.mutation.SetInsertionID(id)
	return auo
}

// SetInsertion sets the "insertion" edge to the Member entity.
func (auo *AttachmentUpdateOne) SetInsertion(m *Member) *AttachmentUpdateOne {
	return auo.SetInsertionID(m.ID)
}

// SetAssignationID sets the "assignation" edge to the Project entity by ID.
func (auo *AttachmentUpdateOne) SetAssignationID(id string) *AttachmentUpdateOne {
	auo.mutation.SetAssignationID(id)
	return auo
}

// SetAssignation sets the "assignation" edge to the Project entity.
func (auo *AttachmentUpdateOne) SetAssignation(p *Project) *AttachmentUpdateOne {
	return auo.SetAssignationID(p.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (auo *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return auo.mutation
}

// ClearInsertion clears the "insertion" edge to the Member entity.
func (auo *AttachmentUpdateOne) ClearInsertion() *AttachmentUpdateOne {
	auo.mutation.ClearInsertion()
	return auo
}

// ClearAssignation clears the "assignation" edge to the Project entity.
func (auo *AttachmentUpdateOne) ClearAssignation() *AttachmentUpdateOne {
	auo.mutation.ClearAssignation()
	return auo
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (auo *AttachmentUpdateOne) Where(ps ...predicate.Attachment) *AttachmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attachment entity.
func (auo *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttachmentUpdateOne) check() error {
	if _, ok := auo.mutation.InsertionID(); auo.mutation.InsertionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.insertion"`)
	}
	if _, ok := auo.mutation.AssignationID(); auo.mutation.AssignationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.assignation"`)
	}
	return nil
}

func (auo *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attachment.Table, attachment.Columns, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Attachment(); ok {
		_spec.SetField(attachment.FieldAttachment, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(attachment.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(attachment.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.InsertionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.InsertionTable,
			Columns: []string{attachment.InsertionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.InsertionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.InsertionTable,
			Columns: []string{attachment.InsertionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssignationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.AssignationTable,
			Columns: []string{attachment.AssignationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssignationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attachment.AssignationTable,
			Columns: []string{attachment.AssignationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attachment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
