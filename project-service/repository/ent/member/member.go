// Code generated by ent, DO NOT EDIT.

package member

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeCreate holds the string denoting the create edge name in mutations.
	EdgeCreate = "create"
	// EdgeAssign holds the string denoting the assign edge name in mutations.
	EdgeAssign = "assign"
	// EdgeAdd holds the string denoting the add edge name in mutations.
	EdgeAdd = "add"
	// Table holds the table name of the member in the database.
	Table = "members"
	// CreateTable is the table that holds the create relation/edge.
	CreateTable = "projects"
	// CreateInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	CreateInverseTable = "projects"
	// CreateColumn is the table column denoting the create relation/edge.
	CreateColumn = "created_by"
	// AssignTable is the table that holds the assign relation/edge.
	AssignTable = "teams"
	// AssignInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	AssignInverseTable = "teams"
	// AssignColumn is the table column denoting the assign relation/edge.
	AssignColumn = "assigned_by"
	// AddTable is the table that holds the add relation/edge.
	AddTable = "attachments"
	// AddInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AddInverseTable = "attachments"
	// AddColumn is the table column denoting the add relation/edge.
	AddColumn = "added_by"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Member queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateCount orders the results by create count.
func ByCreateCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreateStep(), opts...)
	}
}

// ByCreate orders the results by create terms.
func ByCreate(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreateStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignCount orders the results by assign count.
func ByAssignCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignStep(), opts...)
	}
}

// ByAssign orders the results by assign terms.
func ByAssign(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddCount orders the results by add count.
func ByAddCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddStep(), opts...)
	}
}

// ByAdd orders the results by add terms.
func ByAdd(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CreateTable, CreateColumn),
	)
}
func newAssignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AssignTable, AssignColumn),
	)
}
func newAddStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AddTable, AddColumn),
	)
}
