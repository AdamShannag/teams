// Code generated by ent, DO NOT EDIT.

package attachment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attachment type in the database.
	Label = "attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttachment holds the string denoting the attachment field in the database.
	FieldAttachment = "attachment"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAddedBy holds the string denoting the added_by field in the database.
	FieldAddedBy = "added_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeInsertion holds the string denoting the insertion edge name in mutations.
	EdgeInsertion = "insertion"
	// EdgeAssignation holds the string denoting the assignation edge name in mutations.
	EdgeAssignation = "assignation"
	// Table holds the table name of the attachment in the database.
	Table = "attachments"
	// InsertionTable is the table that holds the insertion relation/edge.
	InsertionTable = "attachments"
	// InsertionInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	InsertionInverseTable = "members"
	// InsertionColumn is the table column denoting the insertion relation/edge.
	InsertionColumn = "added_by"
	// AssignationTable is the table that holds the assignation relation/edge.
	AssignationTable = "attachments"
	// AssignationInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	AssignationInverseTable = "projects"
	// AssignationColumn is the table column denoting the assignation relation/edge.
	AssignationColumn = "project_id"
)

// Columns holds all SQL columns for attachment fields.
var Columns = []string{
	FieldID,
	FieldAttachment,
	FieldProjectID,
	FieldDescription,
	FieldAddedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Attachment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAttachment orders the results by the attachment field.
func ByAttachment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttachment, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAddedBy orders the results by the added_by field.
func ByAddedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByInsertionField orders the results by insertion field.
func ByInsertionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInsertionStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignationField orders the results by assignation field.
func ByAssignationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignationStep(), sql.OrderByField(field, opts...))
	}
}
func newInsertionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InsertionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InsertionTable, InsertionColumn),
	)
}
func newAssignationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AssignationTable, AssignationColumn),
	)
}
