// Code generated by ent, DO NOT EDIT.

package attachment

import (
	"project-service/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldID, id))
}

// Attachment applies equality check predicate on the "attachment" field. It's identical to AttachmentEQ.
func Attachment(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldAttachment, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldProjectID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldDescription, v))
}

// AddedBy applies equality check predicate on the "added_by" field. It's identical to AddedByEQ.
func AddedBy(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldAddedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldUpdatedAt, v))
}

// AttachmentEQ applies the EQ predicate on the "attachment" field.
func AttachmentEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldAttachment, v))
}

// AttachmentNEQ applies the NEQ predicate on the "attachment" field.
func AttachmentNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldAttachment, v))
}

// AttachmentIn applies the In predicate on the "attachment" field.
func AttachmentIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldAttachment, vs...))
}

// AttachmentNotIn applies the NotIn predicate on the "attachment" field.
func AttachmentNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldAttachment, vs...))
}

// AttachmentGT applies the GT predicate on the "attachment" field.
func AttachmentGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldAttachment, v))
}

// AttachmentGTE applies the GTE predicate on the "attachment" field.
func AttachmentGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldAttachment, v))
}

// AttachmentLT applies the LT predicate on the "attachment" field.
func AttachmentLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldAttachment, v))
}

// AttachmentLTE applies the LTE predicate on the "attachment" field.
func AttachmentLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldAttachment, v))
}

// AttachmentContains applies the Contains predicate on the "attachment" field.
func AttachmentContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldAttachment, v))
}

// AttachmentHasPrefix applies the HasPrefix predicate on the "attachment" field.
func AttachmentHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldAttachment, v))
}

// AttachmentHasSuffix applies the HasSuffix predicate on the "attachment" field.
func AttachmentHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldAttachment, v))
}

// AttachmentEqualFold applies the EqualFold predicate on the "attachment" field.
func AttachmentEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldAttachment, v))
}

// AttachmentContainsFold applies the ContainsFold predicate on the "attachment" field.
func AttachmentContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldAttachment, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldProjectID, v))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldProjectID, v))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldProjectID, v))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldProjectID, v))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldProjectID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldDescription, v))
}

// AddedByEQ applies the EQ predicate on the "added_by" field.
func AddedByEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldAddedBy, v))
}

// AddedByNEQ applies the NEQ predicate on the "added_by" field.
func AddedByNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldAddedBy, v))
}

// AddedByIn applies the In predicate on the "added_by" field.
func AddedByIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldAddedBy, vs...))
}

// AddedByNotIn applies the NotIn predicate on the "added_by" field.
func AddedByNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldAddedBy, vs...))
}

// AddedByGT applies the GT predicate on the "added_by" field.
func AddedByGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldAddedBy, v))
}

// AddedByGTE applies the GTE predicate on the "added_by" field.
func AddedByGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldAddedBy, v))
}

// AddedByLT applies the LT predicate on the "added_by" field.
func AddedByLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldAddedBy, v))
}

// AddedByLTE applies the LTE predicate on the "added_by" field.
func AddedByLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldAddedBy, v))
}

// AddedByContains applies the Contains predicate on the "added_by" field.
func AddedByContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldAddedBy, v))
}

// AddedByHasPrefix applies the HasPrefix predicate on the "added_by" field.
func AddedByHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldAddedBy, v))
}

// AddedByHasSuffix applies the HasSuffix predicate on the "added_by" field.
func AddedByHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldAddedBy, v))
}

// AddedByEqualFold applies the EqualFold predicate on the "added_by" field.
func AddedByEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldAddedBy, v))
}

// AddedByContainsFold applies the ContainsFold predicate on the "added_by" field.
func AddedByContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldAddedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasInsertion applies the HasEdge predicate on the "insertion" edge.
func HasInsertion() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InsertionTable, InsertionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInsertionWith applies the HasEdge predicate on the "insertion" edge with a given conditions (other predicates).
func HasInsertionWith(preds ...predicate.Member) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := newInsertionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignation applies the HasEdge predicate on the "assignation" edge.
func HasAssignation() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AssignationTable, AssignationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignationWith applies the HasEdge predicate on the "assignation" edge with a given conditions (other predicates).
func HasAssignationWith(preds ...predicate.Project) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := newAssignationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(sql.NotPredicates(p))
}
