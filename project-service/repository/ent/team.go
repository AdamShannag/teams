// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-service/repository/ent/member"
	"project-service/repository/ent/project"
	"project-service/repository/ent/team"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"teamId"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID *string `json:"projectId"`
	// Status holds the value of the "status" field.
	Status team.Status `json:"status"`
	// AssignedBy holds the value of the "assigned_by" field.
	AssignedBy *string `json:"assignedBy"`
	// AssignedAt holds the value of the "assigned_at" field.
	AssignedAt time.Time `json:"assignedAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges        TeamEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// AssignBy holds the value of the assignBy edge.
	AssignBy *Member `json:"assignBy,omitempty"`
	// Assignation holds the value of the assignation edge.
	Assignation *Project `json:"assignation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AssignByOrErr returns the AssignBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) AssignByOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.AssignBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.AssignBy, nil
	}
	return nil, &NotLoadedError{edge: "assignBy"}
}

// AssignationOrErr returns the Assignation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) AssignationOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Assignation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Assignation, nil
	}
	return nil, &NotLoadedError{edge: "assignation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldID, team.FieldProjectID, team.FieldStatus, team.FieldAssignedBy:
			values[i] = new(sql.NullString)
		case team.FieldAssignedAt, team.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case team.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				t.ProjectID = new(string)
				*t.ProjectID = value.String
			}
		case team.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = team.Status(value.String)
			}
		case team.FieldAssignedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_by", values[i])
			} else if value.Valid {
				t.AssignedBy = new(string)
				*t.AssignedBy = value.String
			}
		case team.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				t.AssignedAt = value.Time
			}
		case team.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAssignBy queries the "assignBy" edge of the Team entity.
func (t *Team) QueryAssignBy() *MemberQuery {
	return NewTeamClient(t.config).QueryAssignBy(t)
}

// QueryAssignation queries the "assignation" edge of the Team entity.
func (t *Team) QueryAssignation() *ProjectQuery {
	return NewTeamClient(t.config).QueryAssignation(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	if v := t.ProjectID; v != nil {
		builder.WriteString("project_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	if v := t.AssignedBy; v != nil {
		builder.WriteString("assigned_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(t.AssignedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
