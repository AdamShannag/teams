// Code generated by ent, DO NOT EDIT.

package team

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the team type in the database.
	Label = "team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAssignedBy holds the string denoting the assigned_by field in the database.
	FieldAssignedBy = "assigned_by"
	// FieldAssignedAt holds the string denoting the assigned_at field in the database.
	FieldAssignedAt = "assigned_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAssignBy holds the string denoting the assignby edge name in mutations.
	EdgeAssignBy = "assignBy"
	// EdgeAssignation holds the string denoting the assignation edge name in mutations.
	EdgeAssignation = "assignation"
	// Table holds the table name of the team in the database.
	Table = "teams"
	// AssignByTable is the table that holds the assignBy relation/edge.
	AssignByTable = "teams"
	// AssignByInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	AssignByInverseTable = "members"
	// AssignByColumn is the table column denoting the assignBy relation/edge.
	AssignByColumn = "assigned_by"
	// AssignationTable is the table that holds the assignation relation/edge.
	AssignationTable = "teams"
	// AssignationInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	AssignationInverseTable = "projects"
	// AssignationColumn is the table column denoting the assignation relation/edge.
	AssignationColumn = "project_id"
)

// Columns holds all SQL columns for team fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldStatus,
	FieldAssignedBy,
	FieldAssignedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAssignedAt holds the default value on creation for the "assigned_at" field.
	DefaultAssignedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPENDING     Status = "PENDING"
	StatusIN_PROGRESS Status = "IN_PROGRESS"
	StatusDONE        Status = "DONE"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusIN_PROGRESS, StatusDONE:
		return nil
	default:
		return fmt.Errorf("team: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Team queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAssignedBy orders the results by the assigned_by field.
func ByAssignedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedBy, opts...).ToFunc()
}

// ByAssignedAt orders the results by the assigned_at field.
func ByAssignedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAssignByField orders the results by assignBy field.
func ByAssignByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignByStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignationField orders the results by assignation field.
func ByAssignationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignationStep(), sql.OrderByField(field, opts...))
	}
}
func newAssignByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AssignByTable, AssignByColumn),
	)
}
func newAssignationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AssignationTable, AssignationColumn),
	)
}
