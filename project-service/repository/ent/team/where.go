// Code generated by ent, DO NOT EDIT.

package team

import (
	"project-service/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldProjectID, v))
}

// AssignedBy applies equality check predicate on the "assigned_by" field. It's identical to AssignedByEQ.
func AssignedBy(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldAssignedBy, v))
}

// AssignedAt applies equality check predicate on the "assigned_at" field. It's identical to AssignedAtEQ.
func AssignedAt(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldAssignedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldProjectID, v))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldProjectID, v))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldProjectID, v))
}

// ProjectIDIsNil applies the IsNil predicate on the "project_id" field.
func ProjectIDIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldProjectID))
}

// ProjectIDNotNil applies the NotNil predicate on the "project_id" field.
func ProjectIDNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldProjectID))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldProjectID, v))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldProjectID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldStatus, vs...))
}

// AssignedByEQ applies the EQ predicate on the "assigned_by" field.
func AssignedByEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldAssignedBy, v))
}

// AssignedByNEQ applies the NEQ predicate on the "assigned_by" field.
func AssignedByNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldAssignedBy, v))
}

// AssignedByIn applies the In predicate on the "assigned_by" field.
func AssignedByIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldAssignedBy, vs...))
}

// AssignedByNotIn applies the NotIn predicate on the "assigned_by" field.
func AssignedByNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldAssignedBy, vs...))
}

// AssignedByGT applies the GT predicate on the "assigned_by" field.
func AssignedByGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldAssignedBy, v))
}

// AssignedByGTE applies the GTE predicate on the "assigned_by" field.
func AssignedByGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldAssignedBy, v))
}

// AssignedByLT applies the LT predicate on the "assigned_by" field.
func AssignedByLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldAssignedBy, v))
}

// AssignedByLTE applies the LTE predicate on the "assigned_by" field.
func AssignedByLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldAssignedBy, v))
}

// AssignedByContains applies the Contains predicate on the "assigned_by" field.
func AssignedByContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldAssignedBy, v))
}

// AssignedByHasPrefix applies the HasPrefix predicate on the "assigned_by" field.
func AssignedByHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldAssignedBy, v))
}

// AssignedByHasSuffix applies the HasSuffix predicate on the "assigned_by" field.
func AssignedByHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldAssignedBy, v))
}

// AssignedByIsNil applies the IsNil predicate on the "assigned_by" field.
func AssignedByIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldAssignedBy))
}

// AssignedByNotNil applies the NotNil predicate on the "assigned_by" field.
func AssignedByNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldAssignedBy))
}

// AssignedByEqualFold applies the EqualFold predicate on the "assigned_by" field.
func AssignedByEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldAssignedBy, v))
}

// AssignedByContainsFold applies the ContainsFold predicate on the "assigned_by" field.
func AssignedByContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldAssignedBy, v))
}

// AssignedAtEQ applies the EQ predicate on the "assigned_at" field.
func AssignedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldAssignedAt, v))
}

// AssignedAtNEQ applies the NEQ predicate on the "assigned_at" field.
func AssignedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldAssignedAt, v))
}

// AssignedAtIn applies the In predicate on the "assigned_at" field.
func AssignedAtIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldAssignedAt, vs...))
}

// AssignedAtNotIn applies the NotIn predicate on the "assigned_at" field.
func AssignedAtNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldAssignedAt, vs...))
}

// AssignedAtGT applies the GT predicate on the "assigned_at" field.
func AssignedAtGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldAssignedAt, v))
}

// AssignedAtGTE applies the GTE predicate on the "assigned_at" field.
func AssignedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldAssignedAt, v))
}

// AssignedAtLT applies the LT predicate on the "assigned_at" field.
func AssignedAtLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldAssignedAt, v))
}

// AssignedAtLTE applies the LTE predicate on the "assigned_at" field.
func AssignedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldAssignedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAssignBy applies the HasEdge predicate on the "assignBy" edge.
func HasAssignBy() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AssignByTable, AssignByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignByWith applies the HasEdge predicate on the "assignBy" edge with a given conditions (other predicates).
func HasAssignByWith(preds ...predicate.Member) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newAssignByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignation applies the HasEdge predicate on the "assignation" edge.
func HasAssignation() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AssignationTable, AssignationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignationWith applies the HasEdge predicate on the "assignation" edge with a given conditions (other predicates).
func HasAssignationWith(preds ...predicate.Project) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newAssignationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(sql.NotPredicates(p))
}
