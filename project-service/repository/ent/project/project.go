// Code generated by ent, DO NOT EDIT.

package project

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCreation holds the string denoting the creation edge name in mutations.
	EdgeCreation = "creation"
	// EdgeAssigned holds the string denoting the assigned edge name in mutations.
	EdgeAssigned = "assigned"
	// EdgeAttachment holds the string denoting the attachment edge name in mutations.
	EdgeAttachment = "attachment"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// CreationTable is the table that holds the creation relation/edge.
	CreationTable = "projects"
	// CreationInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	CreationInverseTable = "members"
	// CreationColumn is the table column denoting the creation relation/edge.
	CreationColumn = "created_by"
	// AssignedTable is the table that holds the assigned relation/edge.
	AssignedTable = "teams"
	// AssignedInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	AssignedInverseTable = "teams"
	// AssignedColumn is the table column denoting the assigned relation/edge.
	AssignedColumn = "project_id"
	// AttachmentTable is the table that holds the attachment relation/edge.
	AttachmentTable = "attachments"
	// AttachmentInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentInverseTable = "attachments"
	// AttachmentColumn is the table column denoting the attachment relation/edge.
	AttachmentColumn = "project_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImage,
	FieldDescription,
	FieldStatus,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPENDING     Status = "PENDING"
	StatusANALYSIS    Status = "ANALYSIS"
	StatusDESIGN      Status = "DESIGN"
	StatusDEVELOPMENT Status = "DEVELOPMENT"
	StatusTESTING     Status = "TESTING"
	StatusRELEASED    Status = "RELEASED"
	StatusDELETED     Status = "DELETED"
	StatusBLOCKED     Status = "BLOCKED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusANALYSIS, StatusDESIGN, StatusDEVELOPMENT, StatusTESTING, StatusRELEASED, StatusDELETED, StatusBLOCKED:
		return nil
	default:
		return fmt.Errorf("project: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreationField orders the results by creation field.
func ByCreationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreationStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignedCount orders the results by assigned count.
func ByAssignedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedStep(), opts...)
	}
}

// ByAssigned orders the results by assigned terms.
func ByAssigned(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttachmentCount orders the results by attachment count.
func ByAttachmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttachmentStep(), opts...)
	}
}

// ByAttachment orders the results by attachment terms.
func ByAttachment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttachmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreationTable, CreationColumn),
	)
}
func newAssignedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AssignedTable, AssignedColumn),
	)
}
func newAttachmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttachmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AttachmentTable, AttachmentColumn),
	)
}
